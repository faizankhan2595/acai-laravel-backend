<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Resources\OrderResource;
use App\Notifications\ScanSuccessForUser;
use App\Notifications\TransactionNotification;
use App\Order;
use App\RewardVoucher;
use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Mpdf\QrCode\Output;
use Mpdf\QrCode\QrCode;
use Illuminate\Support\Facades\Cache;
use Illuminate\Contracts\Cache\LockTimeoutException;

class OrderController extends Controller
{
    /**
     * [create order and generate QR code to Scan later and deduct points when QR code scanned successfully!]
     * @param  Request $request [Illuminate\Http\Request]
     * @return [type]           [App\Http\Resources\OrderResource]
     */
    public function create(Request $request)
    {
        $user    = $request->user();
        $order   = new Order();
        $voucher = RewardVoucher::findOrfail($request->voucher_id);
        if (!$voucher->isActive()) {
            return response()->json(['success' => false, 'message' => "Something went wrong!"], 400);
        }

        if (!$user->canBuy($voucher)) {
            return response()->json(['success' => false, 'message' => "Insufficient points!"], 400);
        }

        if ($voucher->is_special_voucher === 1) {
            $special_voucher = DB::table('reward_voucher_user')
                ->select('redemption_count', 'is_redeemed')
                ->where('user_id', $user->id)
                ->where('reward_voucher_id', $voucher->id)
                ->first();
            if ($special_voucher->is_redeemed) {
                return response()->json(['success' => false, 'message' => "Voucher already redeemed!"], 400);
            }

            /**
             * Moving this code to scan method so is_redemmed is
             * marked when user actually scans the code
             */

            // $update = DB::table('reward_voucher_user')
            //     ->where('user_id', $user->id)
            //     ->where('reward_voucher_id', $voucher->id)
            //     ->update([
            //         'redeemed_on'      => Carbon::now(),
            //         'is_redeemed'      => 1,
            //         'redemption_count' => $special_voucher->redemption_count + 1,
            //     ]);
        }

        $coupon      = strtoupper(getUniqueToken(15));
        $qrCode      = new QrCode($coupon);
        $output      = new Output\Png();
        $output_file = 'orders/qr-' . time() . '.png';
        $qrpath      = Storage::disk('public')->put($output_file, $output->output($qrCode, 200, [255, 255, 255], [0, 0, 0]));

        $order->user_id           = $user->id;
        $order->reward_voucher_id = $voucher->id;
        $order->amount            = $voucher->price;
        $order->qr_path           = $output_file;
        $order->coupon_code       = $coupon;
        $order->save();
        //generate order id
        $order->order_id = sprintf('%s%07s%02s', now()->format('ymd'), $user->id, $order->id);
        $order->save();
        return new OrderResource($order);
    }

    /**
     * [scanQrCode : Merchant or Sales prerson will scan QR code whoich was generated BY user when he/she bought a voucher]
     * @param  @param  Request $request [Illuminate\Http\Request]
     * @return [json]  [description]
     */
    public function scanQrCode(Request $request)
    {

        $lock = Cache::lock('coupon_code'.$request->code);

        try {
            $lock->block(50);

            if (!$lock->get()) {

                $scanned_by = $request->user();
                if (!in_array($scanned_by->getRoleNames()->first(), ['merchant', 'sales_person'])) {
                    return response()->json(['success' => false, 'message' => 'You don\'t have permission to perform this action'], 400);
                }
                $now   = Carbon::now();
                $order = Order::where("coupon_code", $request->code)->first();
                /*
                check if order exists with the code
                */
                if (is_null($order)) {
                    return response()->json(['success' => false, 'message' => 'Invalid QR Code'], 400);
                }
                //if already redeemed
                // $query = $order->scannedBy();
                // dd(str_replace_array('?', $query->getBindings(), $query->toSql()));
                if (!is_null($order->redeemed_on)) {
                    $msg = 'QR Code already scanned by ' . $order->scannedBy->name . ' on ' . $order->redeemed_on->format('d M Y');
                    return response()->json(['success' => false, 'message' => $msg], 400);
                }
        
                //if QR code is older than 168 hours | 1 Week
                if ($order->created_at->diffInHours($now) > 168) {
                    return response()->json(['success' => false, 'message' => 'This QR Code is older.'], 400);
                }
        
                //if person who is scanning is sales_person the voucher must be Acai's Voucher
                if ($scanned_by->getRoleNames()->first() == 'sales_person' && $order->voucher->merchant->is_project_acai == 0) {
                    return response()->json(['success' => false, 'message' => 'You can\'t redeem this voucher.'], 400);
                }
        
                //if person who is scanning is merchant the voucher must belongs to him
                if ($scanned_by->getRoleNames()->first() == 'merchant' && $order->voucher->merchant->id != $scanned_by->id) {
                    return response()->json(['success' => false, 'message' => 'You can\'t redeem this voucher.'], 400);
                }
        
                $user = $order->user;
        
                //check if user have enough points to redeem
                if ($user->balance() < $order->amount) {
                    return response()->json(['success' => false, 'message' => "Insufficient points!"], 400);
                }
    
                // $lock = Cache::lock('coupon_code'.$request->code, function () use ($order, $scanned_by, $user) {
                    //everything is fine do transaction and fill redeemed on
                    $redeemed_on = Carbon::now();
                    if (is_null($order->redeemed_on)) {
        
                        $point_transactions_count = DB::table('point_transactions')
                                ->where('data', 'LIKE', '%"order_id":"'.$order->order_id.'",%')
                                ->count();
        
                        if($point_transactions_count == 0) {
                            $transaction = $user->debitPoints([
                                'transaction_value' => $order->amount,
                                'data'              => json_encode(['order_id' => $order->order_id,'voucher_id' => $order->reward_voucher_id, 'message' => 'Reward Redeemed', 'sub_heading' => $order->voucher->merchant->name . ' by ' . $scanned_by->name]),
                            ]);
                            $user->notify(new TransactionNotification($transaction));
                        }
        
                    }
        
                    $order->is_redeemed    = 1;
                    $order->transaction_id = $transaction->id;
                    $order->scanned_by     = $scanned_by->id;
                    $order->redeemed_on    = $redeemed_on;
                    $order->save();
        
                    if ($order->voucher->is_special_voucher == 1) {
                        $special_voucher = DB::table('reward_voucher_user')
                            ->select('redemption_count', 'is_redeemed')
                            ->where('user_id', $user->id)
                            ->where('reward_voucher_id', $order->voucher->id)
                            ->first();
                        $update = DB::table('reward_voucher_user')
                            ->where('user_id', $user->id)
                            ->where('reward_voucher_id', $order->voucher->id)
                            ->update([
                                'redeemed_on'      => Carbon::now(),
                                'is_redeemed'      => 1,
                                'redemption_count' => $special_voucher->redemption_count + 1,
                            ]);
                    }
        
                    $user->notify(new ScanSuccessForUser($order));
                // });
        
                return response()->json([
                    'success'       => true,
                    'voucher_title' => $order->voucher->title,
                    'point_used'    => $order->amount,
                    'order_date'    => $redeemed_on->format('d M Y'),
                    'order_time'    => $redeemed_on->format('g:i A'),
                    'balance'       => $user->balance(),
                ], 200);

                $lock->release();
            } else {
                $lock->release();
                return response()->json(['success' => false, 'message' => "Couldn't acheive lock!"], 400);
            }
         
        } catch (LockTimeoutException $e) {
            return response()->json(['success' => false, 'message' => "Couldn't acheive lock!"], 400);
        } finally {
            optional($lock)->release();
        }

    }

    /**
     * [list List successfull orders for customers with filter]
     * @param  Request $request [Illuminate\Http\Request]
     * @return [type]           [Json]
     */
    function list(Request $request) {
        // $orders = $request->user()->orders()->with('voucher')->paginate(10);
        // return OrderResource::collection($orders);
        $query = Order::query();
        $query = $query->where('orders.user_id', $request->user()->id);
        $query = $query->whereNotNull('orders.redeemed_on');
        $query = $query->join('reward_vouchers', 'orders.reward_voucher_id', '=', 'reward_vouchers.id');
        if ($request->has('merchant') && $request->merchant != 0) {
            $query = $query->where('reward_vouchers.user_id', $request->merchant);
        }

        if ($request->has('date_filter') && $request->date_filter != 0 && $request->fromDate == '' && $request->toDate == '') {
            switch ($request->date_filter) {
                case 1:
                    $query = $query->whereDate('orders.redeemed_on', Carbon::today());
                    break;
                case 2:
                    $query = $query->where('orders.redeemed_on', '>', Carbon::now()->startOfWeek())
                        ->where('orders.redeemed_on', '<', Carbon::now()->endOfWeek());
                    break;
                case 3:
                    $query = $query->whereMonth('orders.redeemed_on', Carbon::now()->month);
                    break;
                case 4:
                    $query = $query->whereYear('orders.redeemed_on', Carbon::now()->year);
                    break;
            }
        }
        if ($request->fromDate != '' && $request->toDate != '') {
            $from = Carbon::createFromFormat('d/m/Y', $request->fromDate)->format('Y-m-d 00:00:00');
            $to   = Carbon::createFromFormat('d/m/Y', $request->toDate)->format('Y-m-d 23:59:59');
            if ($from > $to) {
                $oldfrom = $from;
                $from    = $to;
                $to      = $oldfrom;
            }
            $query = $query->whereBetween('orders.redeemed_on', [$from, $to]);
        }

        $list = $query->with('voucher')->orderBy('orders.id', 'DESC')->paginate(20);
        // dd(str_replace_array('?', $query->getBindings(), $query->toSql()));
        if (!$list->isEmpty()) {
            foreach ($list as $i => $item) {
                $returnlist[] = [
                    'order_id'      => $item->order_id,
                    'coupon_code'   => $item->coupon_code,
                    'amount'        => $item->amount,
                    'qr_code'       => url('/') . Storage::url($item->qr_path),
                    'voucher_id'    => $item->id,
                    'voucher_title' => $item->title,
                    'voucher_image' => url('/') . Storage::url($item->image),
                    'merchant_name' => $item->voucher->merchant->name,
                    'date'          => $item->created_at->format('d M Y'),
                    'redeemed_on'   => (!is_null($item->redeemed_on)) ? $item->redeemed_on->format('d M Y') : null,
                ];
            }
            return response()->json(['data' => $returnlist, 'meta' => ['current_page' => $list->currentPage(), 'last_page' => $list->lastPage()]], 200);
        } else {
            if ($request->is_filter) {
                return response()->json(['data' => [], 'meta' => ['current_page' => 1, 'last_page' => 2]], 200);
            }
            return response()->noContent();
        }
    }

    public function orderMerchants(Request $request)
    {
        $merchants = User::role('merchant')->select('id', 'name')->get();
        return response()->json(['success' => true, 'merchants' => $merchants], 200);
    }
}
